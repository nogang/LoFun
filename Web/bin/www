#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('web:server');
var http = require('http');
var socket = require('socket.io');
var Web3 = require('web3');

var web3 = new Web3();
web3.setProvider(new web3.providers.HttpProvider('http://59.18.225.174:8545'));
console.log("////////////////////////////////////////////");
if (typeof web3 != undefined)
console.log(web3.eth.coinbase);
console.log("////////////////////////////////////////////");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var count = 0;
var lottoStart = 0;
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = socket.listen(server);
io.sockets.on('connection', function (socket) {
  console.log('hello world im a hot socket');

  socket.on('event_name', function(data) {
    console.log('Message from Client: ' + data);
  });

  socket.on('start_lotto', function(data) {
    console.log('Message from Client: ' + data);
    if (lottoStart == 0)
    {
      lottoStart = 1;
      startLotto(data);
    }
  });

});

function startLotto(timeout) {
  io.sockets.emit("rottoPopup","/flashRotto");  //page주소
  var intervalId = setInterval(function() {
    if (timeout < 0){
      io.sockets.emit("rottoTime","준비");
      //io.sockets.emit("killLotto",1);
      web3.personal.unlockAccount(web3.eth.coinbase, 'no2743');
      web3.eth.sendTransaction({
        from: web3.eth.coinbase,
        to: "0xbac29a018a14965ffc939bf8b5d7391e860ab497",
        value: '0'
      }, function(error, hash){
        console.log("error : " + error);
        console.log("hash : " + hash);
      });

      clearInterval(intervalId);
      lottoStart = 0;
    }
    else {
      io.sockets.emit("rottoTime",timeout--);
      console.log('interval: ' + timeout);
    }
  }, 1000);
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
